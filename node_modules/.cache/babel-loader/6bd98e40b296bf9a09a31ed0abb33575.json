{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://material-ui.com/components/time-picker/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://material-ui.com/api/static-time-picker/)\n */\n\nconst StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    ToolbarComponent = TimePickerToolbar,\n    displayStaticWrapperAs = 'mobile'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\"]);\n\n  const AllDateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: AllDateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) => `Select ${view}. Selected time is ${adapter.format(time, 'fullTime')}`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  maxTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  minTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"â€“\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default StaticTimePicker;","map":{"version":3,"sources":["/Users/trantrungchinh/Desktop/minimal-main/node_modules/@material-ui/lab/StaticTimePicker/StaticTimePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","useTimePickerDefaultizedProps","TimePickerToolbar","StaticWrapper","Picker","useTimeValidation","parsePickerInputValue","usePickerState","jsx","_jsx","valueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","StaticTimePicker","forwardRef","inProps","ref","props","validationError","pickerProps","inputProps","ToolbarComponent","displayStaticWrapperAs","other","AllDateInputProps","children","toolbarTitle","label","DateInputProps","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowKeyboardControl","bool","ampm","ampmInClock","className","string","disableCloseOnSelect","disabled","disableIgnoringDatePartForTimeValidation","disableMaskedInput","disableOpenPicker","oneOf","getClockLabelText","func","getOpenDialogAriaText","ignoreInvalidInputs","InputAdornmentProps","object","inputFormat","InputProps","inputRef","oneOfType","shape","current","key","number","node","mask","maxTime","any","Date","minTime","minutesStep","onAccept","onChange","isRequired","onClose","onError","onOpen","open","OpenPickerButtonProps","openPickerIcon","openTo","orientation","readOnly","renderInput","rifmFormatter","shouldDisableTime","showToolbar","elementType","toolbarFormat","toolbarPlaceholder","value","views","arrayOf"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTimePickerDefaultizedProps } from '../TimePicker/shared';\nimport TimePickerToolbar from '../TimePicker/TimePickerToolbar';\nimport StaticWrapper from '../internal/pickers/wrappers/StaticWrapper';\nimport Picker from '../internal/pickers/Picker/Picker';\nimport { useTimeValidation } from '../internal/pickers/hooks/useValidation';\nimport { parsePickerInputValue } from '../internal/pickers/date-utils';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst valueManager = {\n  emptyValue: null,\n  parseInput: parsePickerInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a, b)\n};\n\n/**\n *\n * Demos:\n *\n * - [Time Picker](https://material-ui.com/components/time-picker/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://material-ui.com/api/static-time-picker/)\n */\nconst StaticTimePicker = /*#__PURE__*/React.forwardRef(function StaticTimePicker(inProps, ref) {\n  // TODO: TDate needs to be instantiated at every usage.\n  const props = useTimePickerDefaultizedProps(inProps, 'MuiStaticTimePicker');\n  const validationError = useTimeValidation(props) !== null;\n  const {\n    pickerProps,\n    inputProps\n  } = usePickerState(props, valueManager);\n\n  const {\n    ToolbarComponent = TimePickerToolbar,\n    displayStaticWrapperAs = 'mobile'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"ToolbarComponent\", \"value\", \"onChange\", \"displayStaticWrapperAs\"]);\n\n  const AllDateInputProps = _extends({}, inputProps, other, {\n    ref,\n    validationError\n  });\n\n  return /*#__PURE__*/_jsx(StaticWrapper, {\n    displayStaticWrapperAs: displayStaticWrapperAs,\n    children: /*#__PURE__*/_jsx(Picker, _extends({}, pickerProps, {\n      toolbarTitle: props.label || props.toolbarTitle,\n      ToolbarComponent: ToolbarComponent,\n      DateInputProps: AllDateInputProps\n    }, other))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? StaticTimePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * 12h/24h view for hour selection clock.\n   * @default false\n   */\n  ampm: PropTypes.bool,\n\n  /**\n   * Display ampm controls under the clock (instead of in the toolbar).\n   * @default false\n   */\n  ampmInClock: PropTypes.bool,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Do not ignore date part when validating min/max time.\n   * @default false\n   */\n  disableIgnoringDatePartForTimeValidation: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * Force static wrapper inner components to be rendered in mobile or desktop mode.\n   * @default 'mobile'\n   */\n  displayStaticWrapperAs: PropTypes.oneOf(['desktop', 'mobile']),\n\n  /**\n   * Accessible text that helps user to understand which time and view is selected.\n   * @default <TDate extends any>(\n   *   view: ClockView,\n   *   time: TDate,\n   *   adapter: MuiPickersAdapter<TDate>,\n   * ) => `Select ${view}. Selected time is ${adapter.format(time, 'fullTime')}`\n   */\n  getClockLabelText: PropTypes.func,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   */\n  mask: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  maxTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  minTime: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Step over minutes.\n   * @default 1\n   */\n  minutesStep: PropTypes.number,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * First view to show.\n   */\n  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `props` argument of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api) that you need to forward.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example ```jsx\n   * renderInput={props => <TextField {...props} />}\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Dynamically check if time is disabled or not.\n   * If returns `false` appropriate time point will ot be acceptable.\n   */\n  shouldDisableTime: PropTypes.func,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   * @default TimePickerToolbar\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"â€“\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the picker.\n   */\n  value: PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string]),\n\n  /**\n   * Array of views to show.\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)\n} : void 0;\nexport default StaticTimePicker;"]},"metadata":{},"sourceType":"module"}