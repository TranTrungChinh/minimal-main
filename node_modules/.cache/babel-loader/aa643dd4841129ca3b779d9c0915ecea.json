{"ast":null,"code":"var _jsxFileName = \"/Users/trantrungchinh/Desktop/minimal-main/src/components/@material-extend/MButton.js\";\nimport PropTypes from 'prop-types';\nimport { forwardRef } from 'react'; // material\n\nimport { alpha, experimentalStyled as styled } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonStyle = styled(Button)(({\n  theme,\n  styleProps\n}) => {\n  const {\n    color,\n    variant\n  } = styleProps;\n\n  const styleContained = color => ({\n    boxShadow: theme.customShadows[color],\n    color: theme.palette[color].contrastText,\n    backgroundColor: theme.palette[color].main,\n    '&:hover': {\n      backgroundColor: theme.palette[color].dark\n    }\n  });\n\n  const styleOutlined = color => ({\n    color: theme.palette[color].main,\n    border: `1px solid ${alpha(theme.palette[color].main, 0.48)}`,\n    '&:hover': {\n      border: `1px solid ${theme.palette[color].main}`,\n      backgroundColor: alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n    }\n  });\n\n  const styleText = color => ({\n    color: theme.palette[color].main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n    }\n  });\n\n  return { ...(variant === 'contained' && { ...styleContained(color)\n    }),\n    ...(variant === 'outlined' && { ...styleOutlined(color)\n    }),\n    ...(variant === 'text' && { ...styleText(color)\n    })\n  };\n}); // ----------------------------------------------------------------------\n\nconst MButton = /*#__PURE__*/forwardRef(_c = ({\n  color = 'primary',\n  variant = 'text',\n  children,\n  ...other\n}, ref) => {\n  if (color === 'inherit' || color === 'primary' || color === 'secondary') {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      ref: ref,\n      color: color,\n      variant: variant,\n      ...other,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ButtonStyle, {\n    ref: ref,\n    variant: variant,\n    styleProps: {\n      color,\n      variant\n    },\n    ...other,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n});\n_c2 = MButton;\nMButton.propTypes = {\n  children: PropTypes.node,\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'info', 'success', 'warning', 'error']),\n  variant: PropTypes.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\n};\nexport default MButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MButton$forwardRef\");\n$RefreshReg$(_c2, \"MButton\");","map":{"version":3,"sources":["/Users/trantrungchinh/Desktop/minimal-main/src/components/@material-extend/MButton.js"],"names":["PropTypes","forwardRef","alpha","experimentalStyled","styled","Button","ButtonStyle","theme","styleProps","color","variant","styleContained","boxShadow","customShadows","palette","contrastText","backgroundColor","main","dark","styleOutlined","border","action","hoverOpacity","styleText","MButton","children","other","ref","propTypes","node","oneOf","oneOfType","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { forwardRef } from 'react';\r\n// material\r\nimport { alpha, experimentalStyled as styled } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst ButtonStyle = styled(Button)(({ theme, styleProps }) => {\r\n  const { color, variant } = styleProps;\r\n\r\n  const styleContained = (color) => ({\r\n    boxShadow: theme.customShadows[color],\r\n    color: theme.palette[color].contrastText,\r\n    backgroundColor: theme.palette[color].main,\r\n    '&:hover': {\r\n      backgroundColor: theme.palette[color].dark\r\n    }\r\n  });\r\n\r\n  const styleOutlined = (color) => ({\r\n    color: theme.palette[color].main,\r\n    border: `1px solid ${alpha(theme.palette[color].main, 0.48)}`,\r\n    '&:hover': {\r\n      border: `1px solid ${theme.palette[color].main}`,\r\n      backgroundColor: alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\r\n    }\r\n  });\r\n\r\n  const styleText = (color) => ({\r\n    color: theme.palette[color].main,\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\r\n    }\r\n  });\r\n  return {\r\n    ...(variant === 'contained' && { ...styleContained(color) }),\r\n    ...(variant === 'outlined' && { ...styleOutlined(color) }),\r\n    ...(variant === 'text' && { ...styleText(color) })\r\n  };\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst MButton = forwardRef(({ color = 'primary', variant = 'text', children, ...other }, ref) => {\r\n  if (color === 'inherit' || color === 'primary' || color === 'secondary') {\r\n    return (\r\n      <Button ref={ref} color={color} variant={variant} {...other}>\r\n        {children}\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ButtonStyle ref={ref} variant={variant} styleProps={{ color, variant }} {...other}>\r\n      {children}\r\n    </ButtonStyle>\r\n  );\r\n});\r\n\r\nMButton.propTypes = {\r\n  children: PropTypes.node,\r\n  color: PropTypes.oneOf(['inherit', 'primary', 'secondary', 'info', 'success', 'warning', 'error']),\r\n  variant: PropTypes.oneOfType([PropTypes.oneOf(['contained', 'outlined', 'text']), PropTypes.string])\r\n};\r\n\r\nexport default MButton;\r\n"]},"metadata":{},"sourceType":"module"}