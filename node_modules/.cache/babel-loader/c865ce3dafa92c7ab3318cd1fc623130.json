{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport MobileWrapper from '../internal/pickers/wrappers/MobileWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://material-ui.com/api/mobile-date-range-picker/)\n */\n\nconst MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMobileDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp = defaultMinDate,\n    maxDate: maxDateProp = defaultMaxDate\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"]);\n\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default \"CANCEL\"\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default \"CLEAR\"\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default \"OK\"\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default \"TODAY\"\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"–\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default MobileDateRangePicker;","map":{"version":3,"sources":["/Users/trantrungchinh/Desktop/minimal-main/node_modules/@material-ui/lab/MobileDateRangePicker/MobileDateRangePicker.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","unstable_useThemeProps","useThemeProps","MobileWrapper","useUtils","useParsedDate","defaultMinDate","defaultMaxDate","useDateRangeValidation","usePickerState","DateRangePickerView","DateRangePickerInput","parseRangeInputValue","jsx","_jsx","PureDateInputComponent","rangePickerValueManager","emptyValue","parseInput","areValuesEqual","utils","a","b","isEqual","MobileDateRangePicker","forwardRef","inProps","ref","props","name","calendars","value","onChange","mask","startText","endText","inputFormat","passedInputFormat","minDate","minDateProp","maxDate","maxDateProp","other","currentlySelectingRangeEnd","setCurrentlySelectingRangeEnd","useState","pickerStateProps","restProps","pickerProps","inputProps","wrapperProps","validationError","DateInputProps","formats","keyboardDate","children","open","process","env","NODE_ENV","propTypes","acceptRegex","instanceOf","RegExp","allowKeyboardControl","bool","allowSameDateSelection","oneOf","cancelText","node","className","string","clearable","clearText","components","shape","LeftArrowButton","elementType","LeftArrowIcon","RightArrowButton","RightArrowIcon","SwitchViewButton","SwitchViewIcon","componentsProps","object","defaultCalendarMonth","any","DialogProps","disableAutoMonthSwitching","disableCloseOnSelect","disabled","disableFuture","disableHighlightToday","disableMaskedInput","disableOpenPicker","disablePast","getOpenDialogAriaText","func","getViewSwitchingButtonText","ignoreInvalidInputs","InputAdornmentProps","InputProps","inputRef","oneOfType","current","key","number","label","leftArrowButtonText","loading","okText","onAccept","isRequired","onClose","onError","onMonthChange","onOpen","onViewChange","OpenPickerButtonProps","openPickerIcon","orientation","readOnly","reduceAnimations","renderDay","renderInput","renderLoading","rifmFormatter","rightArrowButtonText","shouldDisableDate","shouldDisableYear","showDaysOutsideCurrentMonth","showTodayButton","showToolbar","todayText","ToolbarComponent","toolbarFormat","toolbarPlaceholder","toolbarTitle","arrayOf","Date"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useThemeProps as useThemeProps } from '@material-ui/core/styles';\nimport MobileWrapper from '../internal/pickers/wrappers/MobileWrapper';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useParsedDate } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { defaultMinDate, defaultMaxDate } from '../internal/pickers/constants/prop-types';\nimport { useDateRangeValidation } from '../internal/pickers/hooks/useValidation';\nimport { usePickerState } from '../internal/pickers/hooks/usePickerState';\nimport { DateRangePickerView } from '../DateRangePicker/DateRangePickerView';\nimport DateRangePickerInput from '../DateRangePicker/DateRangePickerInput';\nimport { parseRangeInputValue } from '../internal/pickers/date-utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PureDateInputComponent = DateRangePickerInput;\nconst rangePickerValueManager = {\n  emptyValue: [null, null],\n  parseInput: parseRangeInputValue,\n  areValuesEqual: (utils, a, b) => utils.isEqual(a[0], b[0]) && utils.isEqual(a[1], b[1])\n};\n\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://material-ui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://material-ui.com/api/mobile-date-range-picker/)\n */\nconst MobileDateRangePicker = /*#__PURE__*/React.forwardRef(function MobileDateRangePicker(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiMobileDateRangePicker'\n  });\n\n  const {\n    calendars = 2,\n    value,\n    onChange,\n    mask = '__/__/____',\n    startText = 'Start',\n    endText = 'End',\n    inputFormat: passedInputFormat,\n    minDate: minDateProp = defaultMinDate,\n    maxDate: maxDateProp = defaultMaxDate\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"calendars\", \"value\", \"onChange\", \"mask\", \"startText\", \"endText\", \"inputFormat\", \"minDate\", \"maxDate\"]);\n\n  const utils = useUtils();\n  const minDate = useParsedDate(minDateProp);\n  const maxDate = useParsedDate(maxDateProp);\n  const [currentlySelectingRangeEnd, setCurrentlySelectingRangeEnd] = React.useState('start');\n\n  const pickerStateProps = _extends({}, other, {\n    value,\n    onChange\n  });\n\n  const restProps = _extends({}, other, {\n    minDate,\n    maxDate\n  });\n\n  const {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  } = usePickerState(pickerStateProps, rangePickerValueManager);\n  const validationError = useDateRangeValidation(props);\n\n  const DateInputProps = _extends({}, inputProps, restProps, {\n    currentlySelectingRangeEnd,\n    inputFormat: passedInputFormat || utils.formats.keyboardDate,\n    setCurrentlySelectingRangeEnd,\n    startText,\n    endText,\n    mask,\n    validationError,\n    ref\n  });\n\n  return /*#__PURE__*/_jsx(MobileWrapper, _extends({}, restProps, wrapperProps, {\n    DateInputProps: DateInputProps,\n    PureDateInputComponent: PureDateInputComponent,\n    children: /*#__PURE__*/_jsx(DateRangePickerView, _extends({\n      open: wrapperProps.open,\n      DateInputProps: DateInputProps,\n      calendars: calendars,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText\n    }, pickerProps, restProps))\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MobileDateRangePicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Regular expression to detect \"accepted\" symbols.\n   * @default /\\dap/gi\n   */\n  acceptRegex: PropTypes.instanceOf(RegExp),\n\n  /**\n   * Enables keyboard listener for moving between days in calendar.\n   * Defaults to `true` unless the `ClockPicker` is used inside a `Static*` picker component.\n   */\n  allowKeyboardControl: PropTypes.bool,\n\n  /**\n   * If `true`, `onChange` is fired on click even if the same date is selected.\n   * @default false\n   */\n  allowSameDateSelection: PropTypes.bool,\n\n  /**\n   * The number of calendars that render on **desktop**.\n   * @default 2\n   */\n  calendars: PropTypes.oneOf([1, 2, 3]),\n\n  /**\n   * Cancel text message.\n   * @default \"CANCEL\"\n   */\n  cancelText: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * className applied to the root component.\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, it shows the clear action in the picker dialog.\n   * @default false\n   */\n  clearable: PropTypes.bool,\n\n  /**\n   * Clear text message.\n   * @default \"CLEAR\"\n   */\n  clearText: PropTypes.node,\n\n  /**\n   * The components used for each slot.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    LeftArrowButton: PropTypes.elementType,\n    LeftArrowIcon: PropTypes.elementType,\n    RightArrowButton: PropTypes.elementType,\n    RightArrowIcon: PropTypes.elementType,\n    SwitchViewButton: PropTypes.elementType,\n    SwitchViewIcon: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * Props applied to the [`Dialog`](/api/dialog/) element.\n   */\n  DialogProps: PropTypes.object,\n\n  /**\n   * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n   * @default false\n   */\n  disableAutoMonthSwitching: PropTypes.bool,\n\n  /**\n   * If `true` the popup or dialog will immediately close after submitting full date.\n   * @default `true` for Desktop, `false` for Mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * If `true`, todays date is rendering without highlighting with circle.\n   * @default false\n   */\n  disableHighlightToday: PropTypes.bool,\n\n  /**\n   * Disable mask on the keyboard, this should be used rarely. Consider passing proper mask for your format.\n   * @default false\n   */\n  disableMaskedInput: PropTypes.bool,\n\n  /**\n   * Do not render open picker button (renders only text field with validation).\n   * @default false\n   */\n  disableOpenPicker: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * Text for end input label and toolbar placeholder.\n   * @default 'End'\n   */\n  endText: PropTypes.node,\n\n  /**\n   * Get aria-label text for control that opens picker dialog. Aria-label text must include selected date. @DateIOType\n   * @default (value, utils) => `Choose date, selected date is ${utils.format(utils.date(value), 'fullDate')}`\n   */\n  getOpenDialogAriaText: PropTypes.func,\n\n  /**\n   * Get aria-label text for switching between views button.\n   */\n  getViewSwitchingButtonText: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  ignoreInvalidInputs: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard input adornment.\n   */\n  InputAdornmentProps: PropTypes.object,\n\n  /**\n   * Format string.\n   */\n  inputFormat: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  InputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.object\n  })]),\n\n  /**\n   * @ignore\n   */\n  key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * @ignore\n   */\n  label: PropTypes.node,\n\n  /**\n   * Left arrow icon aria-label text.\n   */\n  leftArrowButtonText: PropTypes.string,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Custom mask. Can be used to override generate from format. (e.g. `__/__/____ __:__` or `__/__/____ __:__ _M`).\n   * @default '__/__/____'\n   */\n  mask: PropTypes.string,\n\n  /**\n   * Max selectable date. @DateIOType\n   * @default defaultMaxDate\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   * @default defaultMinDate\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Ok button text.\n   * @default \"OK\"\n   */\n  okText: PropTypes.node,\n\n  /**\n   * Callback fired when date is accepted @DateIOType.\n   */\n  onAccept: PropTypes.func,\n\n  /**\n   * Callback fired when the value (the selected date range) changes @DateIOType.\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n   * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n   * This can be used to render appropriate form error.\n   *\n   * [Read the guide](https://next.material-ui-pickers.dev/guides/forms) about form integration and error displaying.\n   * @DateIOType\n   */\n  onError: PropTypes.func,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   */\n  onOpen: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Control the popup or dialog open state.\n   */\n  open: PropTypes.bool,\n\n  /**\n   * Props to pass to keyboard adornment button.\n   */\n  OpenPickerButtonProps: PropTypes.object,\n\n  /**\n   * Icon displaying for open picker button.\n   */\n  openPickerIcon: PropTypes.node,\n\n  /**\n   * Force rendering in particular orientation.\n   */\n  orientation: PropTypes.oneOf(['landscape', 'portrait']),\n\n  /**\n   * Make picker read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Custom renderer for `<DateRangePicker />` days. @DateIOType\n   * @example (date, dateRangePickerDayProps) => <DateRangePickerDay {...dateRangePickerDayProps} />\n   */\n  renderDay: PropTypes.func,\n\n  /**\n   * The `renderInput` prop allows you to customize the rendered input.\n   * The `startProps` and `endProps` arguments of this render prop contains props of [TextField](https://material-ui.com/api/text-field/#textfield-api),\n   * that you need to forward to the range start/end inputs respectively.\n   * Pay specific attention to the `ref` and `inputProps` keys.\n   * @example\n   * ```jsx\n   * <DateRangePicker\n   *  renderInput={(startProps, endProps) => (\n   *   <React.Fragment>\n   *     <TextField {...startProps} />\n   *     <Box sx={{ mx: 2 }}> to </Box>\n   *     <TextField {...endProps} />\n   *   </React.Fragment>;\n   *  )}\n   * />\n   * ````\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Custom formatter to be passed into Rifm component.\n   */\n  rifmFormatter: PropTypes.func,\n\n  /**\n   * Right arrow icon aria-label text.\n   */\n  rightArrowButtonText: PropTypes.string,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * If `true`, days that have `outsideCurrentMonth={true}` are displayed.\n   * @default false\n   */\n  showDaysOutsideCurrentMonth: PropTypes.bool,\n\n  /**\n   * If `true`, the today button is displayed. **Note** that `showClearButton` has a higher priority.\n   * @default false\n   */\n  showTodayButton: PropTypes.bool,\n\n  /**\n   * If `true`, show the toolbar even in desktop mode.\n   */\n  showToolbar: PropTypes.bool,\n\n  /**\n   * Text for start input label and toolbar placeholder.\n   * @default 'Start'\n   */\n  startText: PropTypes.node,\n\n  /**\n   * Today text message.\n   * @default \"TODAY\"\n   */\n  todayText: PropTypes.node,\n\n  /**\n   * Component that will replace default toolbar renderer.\n   */\n  ToolbarComponent: PropTypes.elementType,\n\n  /**\n   * Date format, that is displaying in toolbar.\n   */\n  toolbarFormat: PropTypes.string,\n\n  /**\n   * Mobile picker date value placeholder, displaying if `value` === `null`.\n   * @default \"–\"\n   */\n  toolbarPlaceholder: PropTypes.node,\n\n  /**\n   * Mobile picker title, displaying in the toolbar.\n   * @default \"SELECT DATE\"\n   */\n  toolbarTitle: PropTypes.node,\n\n  /**\n   * The value of the date range picker.\n   */\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.any, PropTypes.instanceOf(Date), PropTypes.number, PropTypes.string])).isRequired\n} : void 0;\nexport default MobileDateRangePicker;"]},"metadata":{},"sourceType":"module"}